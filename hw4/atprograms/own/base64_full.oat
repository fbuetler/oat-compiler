
global b64chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

/* global b64invs = int[]{62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5,
	6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28,
	29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
	43, 44, 45, 46, 47, 48, 49, 50, 51}; */

void printint(int i){
    print_int(i);
    print_string("\n");
    return;
}
void print_int_array(int[] arr, int len) {
  print_string("{");
  for(var i=0;i<len;i=i+1;) {
    print_int(arr[i]);
    print_string(", ");
  }
  print_string("}\n");
  return;
}

int modulo(int n, int d){
    return (n - (divide(n,d) * d));
}

int divide(int n, int d){
  var x = 0;
  while (d <= n) {
    n = n - d;
    x = x + 1;
  }
  return x;
}

int size_encoded(int size) {
    var ret_size = size;
    /* printint(size); */

    var mod = modulo(size, 3);
    /* printint(mod); */
    if (mod != 0) {
        ret_size = ret_size + (3 - mod);
    }
    /* printint(ret_size); */
    ret_size = divide(ret_size, 3);
    ret_size = ret_size * 4;
    /* printint(ret_size); */
    return ret_size;
}

int[] encode(int[] in, int len){
    if (len == 0) {
        return int[] null;
    }
    var b64 = array_of_string(b64chars);
    var e_len = size_encoded(len);
    var out = new int[e_len];

    var v = 0;
    var i = 0;
    var j = 0;
    while (i < len){
        v = in[i];
         
        if (i+1 < len) {
          v = (v << 8) [|] in[i+1];
        } else {
          v = v << 8;
        }
        if (i+2 < len) {
          v = (v << 8) [|] in[i+2];
        } else {
          v = v << 8;
        }

        out[j] = b64[(v >> 18) [&] 63];
        out[j+1]= b64[(v >> 12) [&] 63];

        if (i+1 < len) {
          out[j+2] = b64[(v >> 6) [&] 63];
        } else {
          out[j+2] = 61; 
        }

        if (i+2 < len) {
            out[j+3] = b64[v [&] 63];
        } else {
            out[j+3] = 61;
        } 

        i = i + 3;
        j = j + 4;
    }
    return out; 
}

int size_decoded(int[] in, int len){
	var ret = divide(len, 4) * 3;
  var i = len-1;
  var done = false;
  while (i>=0 & !done){
    if (in[i] == 61) {
			ret=ret-1;
		} else {
			done = true;
		}
    i=i-1;
  }

	return ret;
}

int[] decode(int[] in, int len){
  var d_len = size_decoded(in, len);
  printint(d_len);
  
  /* 
	size_t i;
	size_t j;
	int    v;

	len = strlen(in);
	if (outlen < b64_decoded_size(in) || len % 4 != 0)
		return 0;

	for (i=0, j=0; i<len; i+=4, j+=3) {
		v = b64invs[in[i]-43];
		v = (v << 6) | b64invs[in[i+1]-43];
		v = in[i+2]=='=' ? v << 6 : (v << 6) | b64invs[in[i+2]-43];
		v = in[i+3]=='=' ? v << 6 : (v << 6) | b64invs[in[i+3]-43];

		out[j] = (v >> 16) & 0xFF;
		if (in[i+2] != '=')
			out[j+1] = (v >> 8) & 0xFF;
		if (in[i+3] != '=')
			out[j+2] = v & 0xFF;
	} */

  return int[] null;
}

int program(int argc, string[] argv){
    var res = string_of_array(encode(array_of_string(argv[1]), length_of_string(argv[1])));
    print_string(res);
    /* print_string("\n");
    res = string_of_array(decode(array_of_string(res), length_of_string(res)));
    print_string(res);
    print_string("\n"); */
    return 0;
}
