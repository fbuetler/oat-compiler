/*19909399,Ghjulia Sialelli*/
/*19944206,Tommaso Pegolotti*/

global n = 5;
global max = 99999;

/* return index of minimum value */
int min(int[] key, bool[] set)
{
  var min = max;
  var min_index = -1;

  for(var i = 0; i<n; i=i+1;)
  {
    if(!set[i] & key[i] < min) /* TODO This was manually modified, see moodle question */
    {
      min = key[i];
      min_index = i;
    }
  }

  return min_index;
}

void print_res(int[] result, int[][] graph)
{
  for(var i = 1; i<n; i=i+1;)
  {
    print_int (result[i]);
    print_string ("-");
    print_int (i);
    if(i != n-1){print_string (" - ");}
  }
  return;
}

/*implementation of prim's algorithm to 
  find minimum spanning tree of a graph */
void prim(int[][] graph)
{
  /*MST of initial graph*/
  var result = new int[n];
  /*value used to get minimum weight*/
  var key = new int[n];
  /*array containing vertices already included*/
  var set = new bool[n];

  /*initialization*/
  for(var i=0; i < n; i=i+1;)
  {
    key[i] = max;
    set[i] = false;
  }  

  key[0] = 0;
  result[0] = -1;

  for (var i=0; i<n-1; i=i+1;)
  {
    var j = min(key, set);
    set[j] = true;

    /*update key value of adjacent vertices to chosen vertix*/
    for( var k = 0; k < n; k = k + 1;)
    {
      if(graph[j][k] != 0 & !set[k] & graph[j][k] < key[k]) /* TODO This was manually modified, see moodle question */
      {
        result[k] = j;
        key[k] = graph[j][k];
      }
    }
  }
  print_res(result,graph);
  return;
}

int program (int argc, string[] argv)
{
  /*
  *     4
  *     |
  *     |(2)
  *     |   (1)
  *     3------2
  *     |    / |
  *  (3)|  /(3)|(2)
  *     |/     |
  *     0------1
  *         (1)
  */
  var graph = new int[][]{new int[]{ 0, 1, 3, 3, 0 }, 
                          new int[]{ 1, 0, 2, 0, 0 }, 
                          new int[]{ 3, 2, 0, 1, 0 }, 
                          new int[]{ 3, 0, 1, 0, 2 }, 
                          new int[]{ 0, 0, 0, 2, 0 }};
  prim(graph);
  return 0;
}

