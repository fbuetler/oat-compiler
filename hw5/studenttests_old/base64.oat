global b64chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

void printint(int i){
    print_int(i);
    print_string("\n");
    return;
}

void print_int_array(int[] arr, int len) {
  print_string("{");
  for(var i=0;i<len;i=i+1;) {
    print_int(arr[i]);
    print_string(", ");
  }
  print_string("}\n");
  return;
}

int modulo(int n, int d){
    return (n - (divide(n,d) * d));
}

int divide(int n, int d){
  var x = 0;
  while (d <= n) {
    n = n - d;
    x = x + 1;
  }
  return x;
}

int size_encoded(int size) {
    var ret_size = size;
    /* printint(size); */

    var mod = modulo(size, 3);
    /* printint(mod); */
    if (mod != 0) {
        ret_size = ret_size + (3 - mod);
    }
    /* printint(ret_size); */
    ret_size = divide(ret_size, 3);
    ret_size = ret_size * 4;
    /* printint(ret_size); */
    return ret_size;
}

int[] encode(int[] in, int len){
    if (len == 0) {
        return int[] null;
    }
    var b64 = array_of_string(b64chars);
    var e_len = size_encoded(len);
    var out = new int[e_len]{i -> 0};

    var v = 0;
    var i = 0;
    var j = 0;
    while (i < len){
        v = in[i];
         
        if (i+1 < len) {
          v = (v << 8) [|] in[i+1];
        } else {
          v = v << 8;
        }
        if (i+2 < len) {
          v = (v << 8) [|] in[i+2];
        } else {
          v = v << 8;
        }

        out[j] = b64[(v >> 18) [&] 63];
        out[j+1]= b64[(v >> 12) [&] 63];

        if (i+1 < len) {
          out[j+2] = b64[(v >> 6) [&] 63];
        } else {
          out[j+2] = 61; 
        }

        if (i+2 < len) {
            out[j+3] = b64[v [&] 63];
        } else {
            out[j+3] = 61;
        } 

        i = i + 3;
        j = j + 4;
    }
    return out; 
}

int program(int argc, string[] argv){
    var res = string_of_array(encode(array_of_string(argv[1]), length_of_string(argv[1])));
    print_string(res);
    return 0;
}
