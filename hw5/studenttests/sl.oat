/* 16929010, Patrick Ziegler */
/* 16914582, Lukas Heimes */

/* An interpreter for our own stack based language SL (Stack Language)
 * The stack is unbounded and the program has 64K integer memory cells
 *
 * Syntax:
 * Each line contains a single instruction of the form
 * C[IMM]
 * i.e., a single ASCII character C followed directly by an
 * optional integer immediate operand in decimal format
 *
 * Lines starting with / are comments, comments always take up the entire line,
 * there are no inline comments
 *
 * C denotes the operation, the following values are allowed:
 * +-*&|~!PD.,J?AEC><
 *
 * If not otherwise noted, the operations don't take an intermediate value.
 * This makes the set of instructions smaller because you don't need two
 * variants per instruction: One that reads from the stack and one that takes an
 * immediate.
 *
 * The binary operations + (Add),- (Sub),* (Mult),& (Bitwise AND),| (Bitwise OR)
 * pop two values from the stack, perform the corresponding operation and push
 * the result onto the stack.
 *
 * The unary operations ~ (Bitwise not),! (Logical not) pop a single value from
 * the stack and push the result onto the stack
 *
 * P (Push) takes an intermediate value and pushes it onto the stack
 * D (Drop) discards the top element from the stack
 * . (Print) pops an element from the stack and prints it as an ascii character
 * , (Print int) same as . but prints it as an int
 * J (Jump) takes an intermediate value and jumps forward that many instructions
 *          The address of the next instruction is taken, so J 0 is a no-op and
 *          J -1 is an infinite loop
 * ? (Conditional jump) Pops a value from the stack. If that value is 0, this
 *          the same as J otherwise it's a no-op
 * A (Abort) Aborts the program
 * E (Exit) Terminates the program normally
 * C (Clone) Duplicates the top value of the stack
 * > (Write) Pops two elements from the stack and writes the second value to the
 *          address given by the first value
 * < (Read) Pops one value from the stack, reads from that memory address and 
 *          writes the result onto the stack.
 */

void abort() {
    print_string("Aborting\n");
    /*
     * Since there is no regular way to call abort in oat we deliberately
     * trigger an array out of bounds.
     */
    var arr = new int[]{};
    var x = arr[0];
    return;
}

/* Stack functions {{{ */
struct Stack {
    /* 
     * Actual size of the stack, may be different than length(content)
     * But size <= length(content) always holds
     */
    int size;
    int[] content
}

Stack stack_new(int initial_size) {
    if(initial_size < 1) {
        initial_size = 1;
    }

    return new Stack{size = 0; content = new int[initial_size]{i -> 0}};
}

bool stack_is_empty(Stack s) {
    return s.size == 0;
}

int stack_peek(Stack s) {
    if(s.size <= 0) {
        print_string("stack_peek: Empty");
        abort();
        return -1;
    }

    return s.content[s.size - 1];
}

int stack_pop(Stack s) {
    if(s.size <= 0) {
        print_string("stack_pop: Empty");
        abort();
        return -1;
    }

    s.size = s.size - 1;

    return s.content[s.size];
}

/**
 * Extend stack array by count slots
 */
void stack_extend(Stack s, int count) {
    var new_size = length(s.content) + count;
    var new_array = new int[new_size]{i -> 0};

    /*
     * Copy over old stack content
     */
    for (var i = 0; i < s.size; i = i + 1;) {
        new_array[i] = s.content[i];
    }

    s.content = new_array;

    return;
}

void stack_push(Stack s, int val) {
    if(s.size >= length(s.content)) {
        /* Double stack size */
        stack_extend(s, length(s.content));
    }

    s.content[s.size] = val;
    s.size = s.size + 1;

    return;
}

void assert_stack_size(Stack s, int size, string msg) {
    if(s.size < size) {
        print_string("Stack has size ");
        print_int(s.size);
        print_string(", expected at least ");
        print_int(size);
        print_string("\n");
        print_string(msg);
        print_string("\n");
        abort();
    }

    return;
}

int[] stack_as_array(Stack s) {
    return new int[s.size]{i -> s.content[i]};
}
/* }}} */

/* SL {{{ */
struct State {
    Stack stack;
    int pc;
    Ins[] insns;
    int[] memory;
    bool finished;
    bool aborted
}

struct Ins {
    (State, Ins) -> void op;
    /* Only set for instructions with immediate values */
    int imm
}

State state_new(Ins[] insns) {
    return new State{
        pc = 0;
        insns = insns;
        /* Stack with initial size of 10 */
        stack = stack_new(10); 
        /* 64K memory cells */
        memory = new int[0x10000]{i -> 0};
        finished = false;
        aborted = false
    };
}

void apply_unop(State s, (int) -> int op) {
    assert_stack_size(s.stack, 1, "unop needs 1 value");
    var val = stack_pop(s.stack);
    var res = op(val);
    stack_push(s.stack, res);
    return;
}

void apply_binop(State s, (int, int) -> int op) {
    assert_stack_size(s.stack, 2, "binop needs 2 values");
    var val1 = stack_pop(s.stack);
    var val2 = stack_pop(s.stack);
    var res = op(val1, val2);
    stack_push(s.stack, res);
    return;
}

void exec_ins(State s, Ins i) {
    i.op(s, i);
    return;
}

Ins next_ins(State s) {
    var ins = s.insns[s.pc];
    s.pc = s.pc + 1;
    return ins;
}

void exec_prog(State s) {
    while(!(s.finished)) {
        exec_ins(s, next_ins(s));
    }

    if (s.aborted) {
        print_string("ABORT\n");
    }

    return;
}

/* instructions {{{ */

void sl_write(State s, Ins i) {
    var addr = stack_pop(s.stack);
    var val = stack_pop(s.stack);

    if (addr >= 0 & addr < length(s.memory)) {
        s.memory[addr] = val;
    }
    else {
        print_string("sl_write: Address ");
        print_int(addr);
        print_string(" is out of bounds");
        abort();
    }

    return;
}

void sl_read(State s, Ins i) {
    var addr = stack_pop(s.stack);

    if (addr >= 0 & addr < length(s.memory)) {
        var val = s.memory[addr];
        stack_push(s.stack, val);
    }
    else {
        print_string("sl_read: Address ");
        print_int(addr);
        print_string(" is out of bounds");
        abort();
    }

    return;
}

void sl_nop(State s, Ins i) { return; }

void sl_push(State s, Ins i) {
    stack_push(s.stack, i.imm);
    return;
}

void sl_drop(State s, Ins i) {
    var x = stack_pop(s.stack);
    return;
}

void sl_jump(State s, Ins i) {
    s.pc = s.pc + i.imm;
    return;
}

void sl_cond_jump(State s, Ins i) {
    var val = stack_pop(s.stack);
    if (val == 0) {
        s.pc = s.pc + i.imm;
    }
    return;
}

void sl_print(State s, Ins i) {
    var val = stack_pop(s.stack);
    print_string(string_of_array(new int[]{val}));
    return;
}

void sl_print_int(State s, Ins i) {
    print_int(stack_pop(s.stack));
    return;
}

void sl_add(State s, Ins i) {
    apply_binop(s, op_add);
    return;
}

void sl_sub(State s, Ins i) {
    apply_binop(s, op_sub);
    return;
}

void sl_mult(State s, Ins i) {
    apply_binop(s, op_mult);
    return;
}

void sl_and(State s, Ins i) {
    apply_binop(s, op_and);
    return;
}

void sl_or(State s, Ins i) {
    apply_binop(s, op_or);
    return;
}

void sl_not(State s, Ins i) {
    apply_unop(s, op_not);
    return;
}

void sl_lognot(State s, Ins i) {
    apply_unop(s, op_lognot);
    return;
}

void sl_abort(State s, Ins i) {
    s.finished = true;
    s.aborted = true;
    return;
}

void sl_exit(State s, Ins i) {
    s.finished = true;
    return;
}

void sl_clone(State s, Ins i) {
    stack_push(s.stack, stack_peek(s.stack));
    return;
}
/* }}} */

/* Operations {{{ */

int op_add(int x, int y) {
    return x + y;
}

int op_sub(int x, int y) {
    return x - y;
}

int op_mult(int x, int y) {
    return x * y;
}

int op_and(int x, int y) {
    return x [&] y;
}

int op_or(int x, int y) {
    return x [|] y;
}

int op_not(int x) {
    return ~x;
}

int op_lognot(int x) {
    if (x == 0) {
        return 1;
    }

    return 0;
}

/* }}} */
/* }}} */

/* SL parser {{{ */
/**
 * Ignores all character from idx until the end of the line
 *
 * Returns idx that points to the first character on the newline or an out-of-
 * bounds index if the line doesn't end with a '\n' character or is the last
 * line.
 */
int skip_line(int[] arr, int idx) {
    var len = length(arr);
    while (true) {
        if (idx >= len) {
            return idx;
        }

        if (arr[idx] == 10 /* \n */) {
            return idx + 1;
        }

        idx = idx + 1;
    }

    /* Unreachable */
    print_string("skip_line: Unreachable");
    abort();
    return idx;
}

int count_code_lines(string str) {
    var arr = array_of_string(str);

    var count = 0;

    var len = length(arr);

    var i = 0;

    while (i < len) {
        var in_comment = false;

        /* Empty lines are treated as comments */
        if (arr[i] == 47 /* / */ | arr[i] == 10 /* \n */) {
            in_comment = true;
        }

        if(!in_comment) {
            count = count + 1;
        }

        i = skip_line(arr, i);
    }

    return count;
}

struct Op {
    (State, Ins) -> void op;
    /* 
     * 0: No immediate
     * 1: Decimal immediate
     */
    int type
}

Op parse_op(int x) {
    var res = new Op{op = sl_nop; type = 0};

    if (x == 43 /* + */) {
        res.op = sl_add;
    }
    else if (x == 45 /* - */) {
        res.op = sl_sub;
    }
    else if (x == 42 /* * */) {
        res.op = sl_mult;
    }
    else if (x == 38 /* & */) {
        res.op = sl_and;
    }
    else if (x == 124 /* | */) {
        res.op = sl_or;
    }
    else if (x == 126 /* ~ */) {
        res.op = sl_not;
    }
    else if (x == 33 /* ! */) {
        res.op = sl_lognot;
    }
    else if (x == 80 /* P */) {
        res.op = sl_push;
        res.type = 1;
    }
    else if (x == 68 /* D */) {
        res.op = sl_drop;
    }
    else if (x == 46 /* . */) {
        res.op = sl_print;
    }
    else if (x == 44 /* , */) {
        res.op = sl_print_int;
    }
    else if (x == 74 /* J */) {
        res.op = sl_jump;
        res.type = 1;
    }
    else if (x == 60 /* < */) {
        res.op = sl_read;
    }
    else if (x == 62 /* > */) {
        res.op = sl_write;
    }
    else if (x == 63 /* ? */) {
        res.op = sl_cond_jump;
        res.type = 1;
    }
    else if (x == 65 /* A */) {
        res.op = sl_abort;
    }
    else if (x == 67 /* C */) {
        res.op = sl_clone;
    }
    else if (x == 69 /* E */) {
        res.op = sl_exit;
    }
    else {
        print_string("Instruction '");
        print_string(string_of_array(new int[]{x}));
        print_string("' is not recognized\n");
        abort();
    }

    return res;
}

struct ParseIntRet {
    int idx;
    int factor;
    Stack digits
}

/**
 * Parses an integer in ASCII numbers starting from idx
 *
 * idx must be in the array bounds
 *
 * Returns the index of the first character on the next line or an out-of- 
 * bounds index and the value of the parsed int
 */
ParseIntRet parse_int(int[] arr, int idx) {
    var len = length(arr);

    var res = new ParseIntRet {
        idx = idx;
        digits = stack_new(1);
        factor = 1
    };

    if(arr[res.idx] == 45 /* - */) {
        res.factor = -1;
        res.idx = res.idx + 1;
    }

    /* Pushes digits onto stack */
    while (true) {
        if (res.idx >= len) {
            return res;
        }

        if (arr[res.idx] == 10 /* \n */) {
            res.idx = res.idx + 1;
            return res;
        }

        /* Check if current character is a digit */
        if(arr[res.idx] >= 48 & arr[res.idx] <= 57) {
            var digit = arr[res.idx] - 48; /* 0 */
            stack_push(res.digits, digit);
        }
        else {
            print_int(arr[res.idx]);
            print_string(" is not a digit!\n");
            abort();
        }

        res.idx = res.idx + 1;
    }

    /* Unreachable */
    print_string("parse_int: Unreachable");
    abort();
    return res;
}

Ins[] parse_prog(string prog) {
    var num_lines = count_code_lines(prog);
    /* Initialize with dummy values so that we don't have to do null checks */
    var insns = new Ins[num_lines]{i -> new Ins{op = sl_nop; imm = 0}};

    var arr = array_of_string(prog);

    var count = 0;

    var len = length(arr);

    var i = 0;

    while (i < len) {
        /* i points to the first character on the line here */

        /* Empty lines are treated as comments */
        if (arr[i] == 47 /* / */) {
            i = skip_line(arr, i + 1);
        }
        else if (arr[i] == 10 /* \n */) {
            i = i + 1;
        }
        else {
            var op = parse_op(arr[i]);
            insns[count].op = op.op;

            i = i + 1;

            if(op.type == 0) {
                if (i < len) {
                    if (arr[i] != 10 /* \n */) {
                        print_string("Expected (10) (\\n), got ");
                        print_int(arr[i]);
                        print_string("\n");
                        abort();
                    }
                }
            }
            else if(op.type == 1) {
                if (i >= len) {
                    print_string("Expected integer literal, got EOF");
                    abort();
                }

                var res = parse_int(arr, i);

                /* Constructs the number from the decimal digits */
                var num = 0;

                while(!stack_is_empty(res.digits)) {
                    num = num + res.factor * stack_pop(res.digits);
                    res.factor = res.factor * 10;
                }

                insns[count].imm = num;
                i = res.idx;
            }
            else {
                print_string("Unknown Op.type ");
                print_int(op.type);
                print_string("\n");
                abort();
            }
            count = count + 1;
        }
    }

    return insns;
}
/* }}} */

int program(int argc, string[] argv) {
    var ins = parse_prog(argv[1]);
    var state = state_new(ins);
    exec_prog(state);
    return 0;
}
