/* Cedric Hegglin */
/* Dominik Alberto */

/* struct stores 3 matrices and a function pointer f */
/* the program applies the function to the frist two matrices and stores the result in the third */
/* f is kronecker product */
/* */
/* result */
/* 89653236242056634235134741216287212849288383232121456562112514820471435716181210242718152427181526814391221391221416166624249624249241023615336153 */
/* we need to append 0 at the end */

struct Data {
  int[][] a;
  int rowsa;
  int colsa;
  int[][] b;
  int rowsb;
  int colsb;
  int[][] c;
  int rowsc;
  int colsc;
  (int[][], int, int, int[][], int, int, int[][]) -> void f
}

Data setData() {
  var an = new int[][]{new int[]{1, 4, 7},
                      new int[]{2, 3, 3}};
  var rowsan = 2;
  var colsan = 3;

  var bn = new int[][]{new int[]{8, 9, 6, 5},
                      new int[]{1, 3, 4, 7},
                      new int[]{2, 8, 8, 3},
                      new int[]{1, 2, 5, 1}};
  var rowsbn = 4;
  var colsbn = 4;

  var cn = new int[][]{new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                      new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                      new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                      new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                      new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                      new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                      new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                      new int[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};

  var rowscn = rowsan * rowsbn;
  var colscn = colsan * colsbn;

  return new Data { a = an; b = bn; c = cn; rowsa = rowsan; rowsb = rowsbn; rowsc = rowscn; colsa = colsan; colsb = colsbn; colsc = colscn; f = kronecker};
}

int program(int argc, string[] argv)
{
    var s = setData();
    apply_f(s);
    print_c(s.c, s.rowsc, s.colsc);
    return 0;
}

void apply_f(Data d) {
  d.f(d.a, d.rowsa, d.colsa, d.b, d.rowsb, d.colsb, d.c);
  return;
}

void print_c(int[][] c, int rc, int cc)
{
    for(var i = 0; i < rc; i=i+1;)
    {
        for(var j = 0; j < cc; j=j+1;)
        {
            print_int(c[i][j]);
        }
    }
    return;
}

void kronecker(int[][] a, int ra, int ca, int [][] b, int rb, int cb, int [][] c)
{
    var startr = 0;
    var startc = 0;
    var index1 = 0;
    var index2 = 0;
    for(var i=0; i < ra; i=i+1;){
      for(var j=0; j < ca; j=j+1;){
        startr = i*rb;
        startc = j*cb;
        for(var k=0; k < rb; k=k+1;){
          for(var l=0; l < cb; l=l+1;){
            index1 = startr + k;
            index2 = startc + l;
            c[index1][index2] = a[i][j] * b[k][l];
          }
        }
      }
    }

    return;
}
