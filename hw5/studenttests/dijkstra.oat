/* Manuel HÃ¤ssig */
/* Nicole Wenzinger */

/* Dijkstra with weighted edges */

/* infinite distance */
global max = 100;

struct WeightedEdge{
	int first;
	int second;
	int weight
}

int[] dijkstra(WeightedEdge[] edges, int size, int order){
	var unvisited_count = order;
	var unvisited = new bool[order] {i -> true};

	var distances = new int[order] {i -> max};
    var prev = new int[order] {i -> -1};

	/* starting node distance */
	distances[0] = 0;

    while (unvisited_count > 0) {
        var min_node = 0;
        var min_node_weight = max;
        for (var i = 0; i < order; i = i + 1;) {
            if (distances[i] < min_node_weight & unvisited[i]) {
                min_node = i;
                min_node_weight = distances[i];
            }
        }

        unvisited_count = unvisited_count - 1;
        unvisited[min_node] = false;

        for (var i = 0; i < size; i = i + 1;) {
            var e = edges[i];
            var v = -1;
            if (e.first == min_node) {
                v = e.second;
            }
            if (e.second == min_node) {
                v = e.first;
            }

            if ((unvisited[e.first] | unvisited[e.second]) & v >= 0) {
                var alt = distances[min_node] + e.weight;
                if (alt < distances[v]) {
                    distances[v] = alt;
                    prev[v] = min_node;
                }
            }
        }
    }

    return distances;
}

void edge_connect(WeightedEdge[] edges, int first, int second, int weight, int pos){
    var new_struct = new WeightedEdge{first = first; second = second; weight = weight};
    edges[pos] = new_struct;
    return;
}

int program(int argc, string[] argv){
	var size = 9; /* edges */
	var order = 6; /* nodes */
	var edges = new WeightedEdge[size]{ i -> new WeightedEdge {first = i; second = i; weight = i} };

	edge_connect(edges, 0, 1, 2, 0);
	edge_connect(edges, 0, 2, 4, 1);
	edge_connect(edges, 1, 2, 1, 2);
	edge_connect(edges, 1, 3, 4, 3);
	edge_connect(edges, 1, 4, 2, 4);
	edge_connect(edges, 2, 4, 3, 5);
	edge_connect(edges, 3, 4, 3, 6);
	edge_connect(edges, 3, 5, 2, 7);
	edge_connect(edges, 4, 5, 2, 8);

	var distances = dijkstra(edges, size, order);

	return distances[5]; /*result should be 6*/
}
